syntax = "proto2";

message Root {
    optional MsgCmdType msgtype = 1;
    optional MsgDevice sender = 2;
    optional MsgDevice receiver = 3;
    optional MsgAttr msgattr = 4;
    optional int32 seqs = 5;
    optional int32 version = 6;
    optional int32 subtype = 7;
    oneof subMsg {
        CommEsp commEsp = 8;
        MctlSys sys = 10;
        MctlNav nav = 11;
        MctlDriver driver = 12;
        MsgNull null = 14;
    }
    optional uint64 timestamp = 15;
}

enum MsgCmdType {
    MsgCmdType_START = 0;
    MsgCmdType_NAV = 240;
    MsgCmdType_LOCALIZATION = 241;
    MsgCmdType_PLANNING = 242;
    MsgCmdType_EMBED_DRIVER = 243;
    MsgCmdType_EMBED_SYS = 244;
    MsgCmdType_EMBED_MIDWARE = 245;
    MsgCmdType_EMBED_OTA = 246;
    MsgCmdType_APPLICATION = 247;
    MsgCmdType_ESP = 248;
    MsgCmdType_UNRECOGNIZED = -1;
}

enum MsgAttr {
    MsgAttr_NONE = 0;
    MsgAttr_REQ = 1;
    MsgAttr_RESP = 2;
    MsgAttr_REPORT = 3;
    MsgAttr_UNRECOGNIZED = -1;
}

enum MsgDevice {
    MsgDevice_COMM_ESP = 0;
    MsgDevice_MAINCTL = 1;
    MsgDevice_LEFTMOTOR = 2;
    MsgDevice_RIGHTMOTOR = 3;
    MsgDevice_BASESTATION = 4;
    MsgDevice_RTKCLI = 5;
    MsgDevice_USBHOST = 6;
    MsgDevice_MOBILEAPP = 7;
    MsgDevice_IOTSERVER = 8;
    MsgDevice_BMS = 9;
    MsgDevice_UNRECOGNIZED = -1;
}

message CommEsp {
    optional int32 subtypeRaw = 1;
    optional EspSubTypeCase subtype = 2;
    oneof espSubType {
        DrvWifiUpload toDev_wifiUpload = 3;
        DrvWifiList toDev_wifiList = 4;
        DrvWifiSet toDev_wifiSet = 5;
        DrvWifiMsg toApp_wifiMsg = 6;
        DrvWifiConf toApp_wifiConf = 7;
        DrvListUpload toApp_listUpload = 8;
        DrvUploadFileReq toDev_uploadFileReq = 9;
        DrvUploadFileCancel toDev_uploadFileCancel = 10;
        DrvDevInfoReq toDev_devInfoReq = 11;
        DrvDevInfoResp toApp_devInfoResp = 12;
        DrvUpgradeReport toApp_upgradeReport = 13;
        WifiIotStatusReport toApp_wifiIotStatusReport = 14;
        DrvUploadFileToAppReq toDev_uploadFileToAppReq = 15;
        DrvUploadFileToAppRsp toApp_uploadFileToAppRsp = 16;
        GetNetworkInfoReq toDev_getNetworkInfoReq = 17;
        GetNetworkInfoRsp toApp_getNetworkInfoRsp = 18;
    }
}

enum EspSubTypeCase {
    EspSubTypeCase_TODEV_BLE_SYNC = 1;
    EspSubTypeCase_TODEV_CONFTYPE = 2;
    EspSubTypeCase_TODEV_WIFIMSGUPLOAD = 3;
    EspSubTypeCase_TODEV_WIFILISTUPLOAD = 4;
    EspSubTypeCase_TODEV_WIFI_CONFIGURATION = 5;
    EspSubTypeCase_TOAPP_WIFIMSG = 6;
    EspSubTypeCase_TOAPP_WIFICONF = 7;
    EspSubTypeCase_TOAPP_LISTUPLOAD = 8;
    EspSubTypeCase_TODEV_REQ_LOG_INFO = 9;
    EspSubTypeCase_TODEV_LOG_DATA_CANCEL = 10;
    EspSubTypeCase_TODEV_DEVINFO_REQ = 11;
    EspSubTypeCase_TOAPP_DEVINFO_RESP = 12;
    EspSubTypeCase_TOAPP_UPGRADE_REPORT = 13;
    EspSubTypeCase_TOAPP_WIFI_IOT_STATUS = 14;
    EspSubTypeCase_TODEV_UPLOADFILE_REQ = 15;
    EspSubTypeCase_TOAPP_UPLOADFILE_RSP = 16;
    EspSubTypeCase_TODEV_NETWORKINFO_REQ = 17;
    EspSubTypeCase_TOAPP_NETWORKINFO_RSP = 18;
    EspSubTypeCase_ESPSUBTYPE_NOT_SET = 0;
}

message DrvWifiUpload {
    optional int32 wifiMsgUpload = 1;
}

message DrvWifiList {
    optional int32 nVSWifiUpload = 1;
}

message DrvWifiSet {
    optional int32 configParam = 1;
    optional string confssid = 2;
}

message DrvWifiMsg {
    optional bool status1 = 1;
    optional bool status = 2;
    optional string IP = 3;
    optional string msgssid = 4;
    optional string password = 5;
    optional int32 rssi = 6;
    optional string productKey = 7;
    optional string deviceName = 8;
}

message DrvWifiConf {
    optional bool succFlag = 1;
    optional int32 code = 2;
    optional string confssid = 3;
}

message DrvListUpload {
    optional int32 sum = 1;
    optional int32 current = 2;
    optional int32 status = 3;
    optional string memssid = 4;
    optional int32 rssi = 5;
}

message DrvUploadFileReq {
    optional string bizId = 1;
    optional string url = 2;
    optional string userId = 3;
    optional int32 num = 4;
    optional int32 type = 5;
}

message DrvUploadFileCancel {
    optional int32 bizId = 1;
}

message DrvDevInfoReq {
    repeated int32 reqIds = 1;
}

message DrvDevInfoResp {
    repeated int32 respIds = 1;
}

message DrvUpgradeReport {
    optional string devname = 1;
    optional string otaid = 2;
    optional string version = 3;
    optional int32 progress = 4;
    optional int32 result = 5;
    optional string message = 6;
    optional string properties = 7;
}

message WifiIotStatusReport {
    optional bool wifiConnected = 1;
    optional bool iotConnected = 2;
    optional string productKey = 3;
    optional string deviceName = 4;
}

message DrvUploadFileToAppReq {
    optional string bizId = 1;
    optional int32 operation = 2;
    optional fixed32 serverIp = 3;
    optional int32 serverPort = 4;
    optional int32 num = 5;
    optional int32 type = 6;
}

message DrvUploadFileToAppRsp {
    optional string bizId = 1;
    optional int32 operation = 2;
    optional int32 result = 3;
}

message GetNetworkInfoReq {
    optional int32 reqIds = 1;
}

message GetNetworkInfoRsp {
    optional int32 reqIds = 1;
    optional string wifiSsid = 2;
    optional string wifiMac = 3;
    optional int32 wifiRssi = 4;
    optional fixed32 ip = 5;
    optional fixed32 mask = 6;
    optional fixed32 gateway = 7;
}

message MctlSys {
    oneof subSysMsg {
        SysBatUp toApp_batInfo = 1;
        SysWorkState toApp_workState = 2;
        SysSetTimeZone toDev_timeZone = 3;
        SysSetDateTime toDev_dateTime = 4;
        SysJobPlan jobPlan = 6;
        SysDevErrCode toApp_errCode = 7;
        SysJobPlanTime toDev_jobPlanTime = 10;
        SysMowInfo toApp_mowInfo = 11;
        SysCommCmd bidire_commCmd = 12;
        int64 planJobDel = 14;
        SysBorder border = 15;
        SysPlanJobStatus toApp_planStatus = 18;
        SysUploadFileProgress toApp_uploadFileProgress = 19;
        SysDelJobPlan toDev_delJobPlan = 20;
        int32 toDev_mowInfoUp = 21;
        SysKnifeControl toDev_knifeControl = 22;
        int32 toDev_resetSystem = 23;
        SysResetSystemStatus toDev_resetSystemStatus = 24;
        systemRapidStateTunnel_msg systemRapidState = 25;
        systemTardStateTunnel_msg systemTardState = 26;
        systemUpdateBuf_msg systemUpdateBuf = 27;
        TimeCtrlLight toDev_timeCtrlLight = 28;
        systemTmpCycleTx_msg systemTmpCycleTx = 29;
        SysOffChipFlash toDev_offChipFlash = 30;
        int32 toDev_getDevFWInfo = 31;
        device_fw_info toApp_deviceFwInfo = 32;
        LoraCfgReq toDev_loraCfgRq = 33;
        LoraCfgRsp toApp_loraCfgRsp = 34;
        mow_to_app_info_t mowToAppInfo = 35;
    }
}

message SysBatUp {
    optional int32 batVal = 1;
}

message SysWorkState {
    optional int32 deviceState = 1;
    optional int32 chargeState = 2;
    optional int64 cmHash = 3;
    optional int64 pathHash = 4;
}

message SysSetTimeZone {
    optional int32 timeStamp = 1;
    optional int32 timeArea = 2;
}

message SysSetDateTime {
    optional int32 year = 1;
    optional int32 month = 2;
    optional int32 date = 3;
    optional int32 week = 4;
    optional int32 hours = 5;
    optional int32 minutes = 6;
    optional int32 seconds = 7;
    optional int32 timeZone = 8;
    optional int32 daylight = 9;
}

message SysJobPlan {
    optional int64 jobId = 1;
    optional int32 jobMode = 2;
    optional int32 rainTactics = 3;
    optional int32 knifeHeight = 4;
}

message SysDevErrCode {
    optional int32 errorCode = 1;
}

message SysJobPlanTime {
    optional int64 planId = 1;
    optional int32 startJobTime = 2;
    optional int32 endJobTime = 3;
    optional int32 timeInDay = 4;
    optional int32 jobPlanMode = 5;
    optional int32 jobPlanEnable = 6;
    optional int32 everyDay = 9;
    optional SysJobPlan jobPlan = 10;
}

message SysMowInfo {
    optional int32 deviceState = 1;
    optional int32 batVal = 2;
    optional int32 knifeHeight = 3;
    optional int32 RTKstatus = 4;
    optional int32 RTKstars = 5;
}

message SysCommCmd {
    optional int32 rw = 1;
    optional int32 id = 2;
    optional int32 context = 3;
}

message SysBorder {
    optional int32 borderVal = 1;
}

message SysPlanJobStatus {
    optional int32 planjobStatus = 1;
}

message SysUploadFileProgress {
    optional string bizId = 1;
    optional int32 result = 2;
    optional int32 progress = 3;
}

message SysDelJobPlan {
    optional string deviceId = 1;
    optional string planId = 2;
}

message SysKnifeControl {
    optional int32 knifeStatus = 1;
    optional int32 knifeHeight = 2;
}

message SysResetSystemStatus {
    optional int32 resetStatus = 1;
}

message systemRapidStateTunnel_msg {
    repeated int64 data = 1;
}

message systemTardStateTunnel_msg {
    repeated int64 data = 1;
}

message systemUpdateBuf_msg {
}

message TimeCtrlLight {
    optional int32 operate = 1;
    optional int32 enable = 2;
    optional int32 startHour = 3;
    optional int32 startMin = 4;
    optional int32 endHour = 5;
    optional int32 endMin = 6;
    optional int32 action = 7;
}

message systemTmpCycleTx_msg {
}

message SysOffChipFlash {
    optional Operation op = 1;
    optional OffPartId id = 2;
    optional uint32 startAddr = 3;
    optional uint32 offset = 4;
    optional int32 length = 5;
    optional bytes data = 6;
    optional int32 code = 7;
    optional string msg = 8;
}

enum Operation {
    Operation_WRITE = 0;
    Operation_READ = 1;
    Operation_ERASE = 2;
    Operation_UNRECOGNIZED = -1;
}

enum OffPartId {
    OffPartId_OFF_PART_DL_IMG = 0;
    OffPartId_OFF_PART_UPDINFO_BACK = 1;
    OffPartId_OFF_PART_UPDINFO = 2;
    OffPartId_OFF_PART_NAKEDB = 3;
    OffPartId_OFF_PART_FLASHDB = 4;
    OffPartId_OFF_PART_UPD_APP_IMG = 5;
    OffPartId_OFF_PART_UPD_BMS_IMG = 6;
    OffPartId_OFF_PART_UPD_TMP_IMG = 7;
    OffPartId_OFF_PART_DEV_INFO = 8;
    OffPartId_OFF_PART_NAKEDB_BACK = 9;
    OffPartId_OFF_PART_MAX = 10;
    OffPartId_UNRECOGNIZED = -1;
}

message device_fw_info {
    optional int32 result = 1;
    optional string version = 2;
    repeated string mod = 3;
}

message LoraCfgReq {
    optional int32 op = 1;
    optional string cfg = 2;
}

message LoraCfgRsp {
    optional int32 result = 1;
    optional int32 op = 2;
    optional string cfg = 3;
    optional string facCfg = 4;
}

message mow_to_app_info_t {
    optional int32 type = 1;
    optional int32 cmd = 2;
}

message MctlNav {
    oneof subNavMsg {
        NavLatLonUp toApp_latUp = 1;
        NavPosUp toApp_posUp = 2;
        NavCHlLineData toDev_CHlLineData = 3;
        NavTaskInfo toApp_taskInfo = 4;
        NavOptLineUp toApp_optLineUp = 5;
        NavOptiBorderInfo toApp_optBorderInfo = 6;
        NavOptObsInfo toApp_optObsInfo = 7;
        NavResFrame toDev_taskInfoAck = 8;
        NavResFrame toDev_optBorderInfoAck = 9;
        NavResFrame toDev_optObsInfoAck = 10;
        NavResFrame toDev_optLineUpAck = 11;
        chargePileType toApp_chgPileTo = 12;
        int32 toDev_susTask = 13;
        int32 toDev_rechgCmd = 14;
        int32 toDev_edgeCmd = 15;
        int32 toDev_drawBorder = 16;
        int32 toDev_drawBorderEnd = 17;
        int32 toDev_drawObs = 18;
        int32 toDev_drawObsEnd = 19;
        int32 toDev_chlLine = 20;
        int32 toDev_chlLineDev = 21;
        int32 toDev_saveTask = 22;
        int32 toDev_cancelSusCmd = 23;
        int32 toDev_resetChgPile = 24;
        int32 toDev_cancelDrawCmd = 25;
        int32 toDev_oneTouchLeavePile = 26;
        NavStartJob toDev_mowTask = 27;
        NavBorderState toApp_bState = 28;
        int32 toDev_latUpAck = 29;
        NavGetHashList toDev_getHash = 30;
        NavGetHashListAck toApp_getHashAck = 31;
        NavGetCommData toDev_getCommonData = 32;
        NavGetCommDataAck toApp_getCommonDataAck = 33;
        NavReqCoverPath bidire_reqconverPath = 34;
        NavUploadZigZagResult toApp_zigZag = 35;
        NavUploadZigZagResultAck toDev_zigZagAck = 36;
        NavTaskCtrl toDev_taskCtrl = 37;
        NavTaskIdRw bidire_taskId = 38;
        NavTaskBreakPoint toApp_BP = 39;
        NavPlanJobSet toDev_planJobSet = 40;
        NavUnableTimeSet toDev_unableTimeSet = 41;
        SimulationCmdData simulationCmd = 42;
        WorkReportUpdateCmd toDev_workReportUpdateCmd = 43;
        WorkReportUpdateAck toApp_workReportUpdateAck = 44;
        WorkReportCmdData toDev_workReportCmd = 45;
        WorkReportInfoAck toApp_workReportAck = 46;
    }
}

message NavLatLonUp {
    optional double lat = 1;
    optional double lon = 2;
}

message NavPosUp {
    optional float x = 1;
    optional float y = 2;
    optional int32 status = 3;
    optional int32 toward = 4;
    optional int32 stars = 5;
    optional float age = 6;
    optional float latStddev = 7;
    optional float lonStddev = 8;
    optional int32 l2DfStars = 9;
    optional int32 posType = 10;
    optional int64 cHashId = 11;
    optional int32 posLevel = 12;
}

message NavCHlLineData {
    optional int32 startJobRI = 1;
    optional int32 endJobRI = 2;
    optional int32 currentFrame = 3;
    optional int32 channelLineLen = 4;
}

message NavTaskInfo {
    optional int32 area = 1;
    optional int32 time = 2;
    optional int32 allFrame = 3;
    optional int32 currentFrame = 4;
    optional int32 pathlen = 5;
    repeated CommDataCouple dc = 6;
}

message CommDataCouple {
    optional float x = 1;
    optional float y = 2;
}

message NavOptLineUp {
    optional int32 startJobRI = 1;
    optional int32 endJobRI = 2;
    optional int32 allFrame = 3;
    optional int32 currentFrame = 4;
    optional int32 channelDataLen = 5;
    repeated CommDataCouple dc = 6;
}

message NavOptiBorderInfo {
    optional int32 jobId = 1;
    optional int32 allFrame = 2;
    optional int32 currentFrame = 3;
    optional int32 borderDataLen = 4;
    repeated CommDataCouple dc = 5;
}

message NavOptObsInfo {
    optional int32 obstacleId = 1;
    optional int32 allFrame = 2;
    optional int32 currentFrame = 3;
    optional int32 obstacleDataLen = 4;
    repeated CommDataCouple dc = 5;
}

message NavResFrame {
    optional int32 frameId = 1;
}

message chargePileType {
    optional int32 toward = 1;
    optional float x = 2;
    optional float y = 3;
}

message NavStartJob {
    optional int64 jobId = 1;
    optional int32 jobVer = 2;
    optional int32 jobMode = 3;
    optional int32 rainTactics = 4;
    optional int32 kinfeHeight = 5;
    optional float speed = 6;
    optional int32 channelWidth = 7;
    optional int32 ultraWave = 8;
    optional int32 channelMode = 9;
}

message NavBorderState {
    optional int32 bdstate = 1;
}

message NavGetHashList {
    optional int32 pver = 1;
    optional int32 subCmd = 2;
    optional int32 totalFrame = 3;
    optional int32 currentFrame = 4;
    optional fixed64 dataHash = 5;
    optional string reserved = 6;
}

message NavGetHashListAck {
    optional int32 pver = 1;
    optional int32 subCmd = 2;
    optional int32 totalFrame = 3;
    optional int32 currentFrame = 4;
    optional fixed64 dataHash = 5;
    optional int32 hashLen = 6;
    optional string reserved = 7;
}

message NavGetCommData {
    optional int32 pver = 1;
    optional int32 subCmd = 2;
    optional int32 action = 3;
    optional int32 type = 4;
    optional int64 hash = 5;
    optional int64 paternalHashA = 6;
    optional int64 paternalHashB = 7;
    optional int32 totalFrame = 8;
    optional int32 currentFrame = 9;
    optional fixed64 dataHash = 10;
    optional string reserved = 11;
}

message NavGetCommDataAck {
    optional int32 pver = 1;
    optional int32 subCmd = 2;
    optional int32 result = 3;
    optional int32 action = 4;
    optional int32 type = 5;
    optional fixed64 hash = 6;
    optional fixed64 paternalHashA = 7;
    optional fixed64 paternalHashB = 8;
    optional int32 totalFrame = 9;
    optional int32 currentFrame = 10;
    optional fixed64 dataHash = 11;
    optional int32 dataLen = 12;
    repeated CommDataCouple dataCouple = 13;
    optional string reserved = 14;
}

message NavReqCoverPath {
    optional int32 pver = 1;
    optional fixed64 jobId = 2;
    optional int32 jobVer = 3;
    optional int32 jobMode = 4;
    optional int32 subCmd = 5;
    optional int32 edgeMode = 6;
    optional int32 knifeHeight = 7;
    optional int32 channelWidth = 8;
    optional int32 ultraWave = 9;
    optional int32 channelMode = 10;
    optional int32 toward = 11;
    optional float speed = 12;
    optional fixed64 pathHash = 14;
    optional string reserved = 15;
    optional int32 result = 16;
}

message NavUploadZigZagResult {
    optional int32 pver = 1;
    optional fixed64 jobId = 2;
    optional int32 jobVer = 3;
    optional int32 result = 4;
    optional int32 area = 5;
    optional int32 time = 6;
    optional int32 totalZoneNum = 7;
    optional int32 currentZonePathNum = 8;
    optional int32 currentZonePathId = 9;
    optional int32 currentZone = 10;
    optional fixed64 currentHash = 11;
    optional int32 totalFrame = 12;
    optional int32 currentFrame = 13;
    optional int32 channelMode = 14;
    optional int32 channelModeId = 15;
    optional fixed64 dataHash = 16;
    optional int32 dataLen = 17;
    optional string reserved = 18;
    repeated CommDataCouple dataCouple = 19;
    optional int32 subCmd = 20;
}

message NavUploadZigZagResultAck {
    optional int32 pver = 1;
    optional int32 currentZone = 2;
    optional fixed64 currentHash = 3;
    optional int32 totalFrame = 4;
    optional int32 currentFrame = 5;
    optional fixed64 dataHash = 6;
    optional string reserved = 7;
    optional int32 subCmd = 8;
}

message NavTaskCtrl {
    optional int32 type = 1;
    optional int32 action = 2;
    optional int32 result = 3;
    optional string reserved = 4;
}

message NavTaskIdRw {
    optional int32 pver = 1;
    optional int32 subCmd = 2;
    optional string taskName = 3;
    optional string taskId = 4;
    optional int32 result = 5;
    optional string reserved = 6;
}

message NavTaskBreakPoint {
    optional float x = 1;
    optional float y = 2;
    optional int32 toward = 3;
    optional int32 flag = 4;
    optional int32 action = 5;
    optional fixed64 zoneHash = 6;
}

message NavPlanJobSet {
    optional int32 pver = 1;
    optional int32 subCmd = 2;
    optional int32 area = 3;
    optional int32 workTime = 4;
    optional string version = 5;
    optional string id = 6;
    optional string userId = 7;
    optional string deviceId = 8;
    optional string planId = 9;
    optional string taskId = 10;
    optional string jobId = 11;
    optional string startTime = 12;
    optional string endTime = 13;
    optional int32 week = 14;
    optional int32 knifeHeight = 15;
    optional int32 model = 16;
    optional int32 edgeMode = 17;
    optional int32 requiredTime = 18;
    optional int32 routeAngle = 19;
    optional int32 routeModel = 20;
    optional int32 routeSpacing = 21;
    optional int32 ultrasonicBarrier = 22;
    optional int32 totalPlanNum = 23;
    optional int32 planIndex = 24;
    optional int32 result = 25;
    optional float speed = 26;
    optional string taskName = 27;
    optional string jobName = 28;
    optional string reserved = 30;
}

message NavUnableTimeSet {
    optional int32 subCmd = 1;
    optional string deviceId = 2;
    optional string unableStartTime = 3;
    optional string unableEndTime = 4;
    optional int32 result = 5;
    optional string reserved = 6;
}

message SimulationCmdData {
    optional int32 subCmd = 1;
    optional int32 paramId = 2;
}

message WorkReportUpdateCmd {
    optional int32 subCmd = 1;
}

message WorkReportUpdateAck {
    optional bool updateFlag = 1;
    optional int32 infoNum = 2;
}

message WorkReportCmdData {
    optional int32 subCmd = 1;
    optional int32 getInfoNum = 2;
}

message WorkReportInfoAck {
    optional bool interruptFlag = 1;
    optional int64 startWorkTime = 2;
    optional int64 endWorkTime = 3;
    optional int32 workTimeUsed = 4;
    optional double workAres = 5;
    optional int32 workProgress = 6;
    optional int32 heightOfKnife = 7;
    optional int32 workType = 8;
    optional int32 workResult = 9;
    optional int32 totalAckNum = 10;
    optional int32 currentAckNum = 11;
}

message MctlDriver {
    oneof subDrvMsg {
        DrvMotionCtrl toDev_devMotionCtrl = 1;
        DrvKnifeHeight toDev_knifeHeightSet = 2;
        DrvSrSpeed bidire_speedReadSet = 3;
        DrvKnifeHeight bidire_knifeHeightReport = 4;
        DrvKnifeStatus toApp_knifeStatus = 5;
    }
}

message DrvMotionCtrl {
    optional int32 setLinearSpeed = 1;
    optional int32 setAngularSpeed = 2;
}

message DrvKnifeHeight {
    optional int32 knifeHeight = 1;
}

message DrvSrSpeed {
    optional int32 rw = 1;
    optional float speed = 2;
}

message DrvKnifeStatus {
    optional int32 knifeStatus = 1;
}

message MsgNull {
}

